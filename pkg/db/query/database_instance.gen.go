// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"ha/pkg/db/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDatabaseInstance(db *gorm.DB, opts ...gen.DOOption) databaseInstance {
	_databaseInstance := databaseInstance{}

	_databaseInstance.databaseInstanceDo.UseDB(db, opts...)
	_databaseInstance.databaseInstanceDo.UseModel(&model.DatabaseInstance{})

	tableName := _databaseInstance.databaseInstanceDo.TableName()
	_databaseInstance.ALL = field.NewAsterisk(tableName)
	_databaseInstance.ID = field.NewInt64(tableName, "id")
	_databaseInstance.Hostname = field.NewString(tableName, "hostname")
	_databaseInstance.Port = field.NewInt32(tableName, "port")
	_databaseInstance.LastChecked = field.NewTime(tableName, "last_checked")
	_databaseInstance.LastSeen = field.NewTime(tableName, "last_seen")
	_databaseInstance.ServerID = field.NewInt32(tableName, "server_id")
	_databaseInstance.Version = field.NewString(tableName, "version")
	_databaseInstance.BinlogFormat = field.NewString(tableName, "binlog_format")
	_databaseInstance.LogBin = field.NewInt32(tableName, "log_bin")
	_databaseInstance.LogSlaveUpdates = field.NewInt32(tableName, "log_slave_updates")
	_databaseInstance.BinaryLogFile = field.NewString(tableName, "binary_log_file")
	_databaseInstance.BinaryLogPos = field.NewInt64(tableName, "binary_log_pos")
	_databaseInstance.MasterHost = field.NewString(tableName, "master_host")
	_databaseInstance.MasterPort = field.NewInt32(tableName, "master_port")
	_databaseInstance.SlaveSqlRunning = field.NewInt32(tableName, "slave_sql_running")
	_databaseInstance.SlaveIoRunning = field.NewInt32(tableName, "slave_io_running")
	_databaseInstance.MasterLogFile = field.NewString(tableName, "master_log_file")
	_databaseInstance.ReadMasterLogPos = field.NewInt64(tableName, "read_master_log_pos")
	_databaseInstance.RelayMasterLogFile = field.NewString(tableName, "relay_master_log_file")
	_databaseInstance.ExecMasterLogPos = field.NewInt64(tableName, "exec_master_log_pos")
	_databaseInstance.SecondsBehindMaster = field.NewInt64(tableName, "seconds_behind_master")
	_databaseInstance.SlaveLagSeconds = field.NewInt64(tableName, "slave_lag_seconds")
	_databaseInstance.NumSlaveHosts = field.NewInt32(tableName, "num_slave_hosts")
	_databaseInstance.SlaveHosts = field.NewString(tableName, "slave_hosts")
	_databaseInstance.ClusterName = field.NewString(tableName, "cluster_name")
	_databaseInstance.CreateTime = field.NewTime(tableName, "create_time")
	_databaseInstance.UpdateTime = field.NewTime(tableName, "update_time")

	_databaseInstance.fillFieldMap()

	return _databaseInstance
}

type databaseInstance struct {
	databaseInstanceDo databaseInstanceDo

	ALL                 field.Asterisk
	ID                  field.Int64
	Hostname            field.String
	Port                field.Int32
	LastChecked         field.Time
	LastSeen            field.Time
	ServerID            field.Int32
	Version             field.String
	BinlogFormat        field.String
	LogBin              field.Int32
	LogSlaveUpdates     field.Int32
	BinaryLogFile       field.String
	BinaryLogPos        field.Int64
	MasterHost          field.String
	MasterPort          field.Int32
	SlaveSqlRunning     field.Int32
	SlaveIoRunning      field.Int32
	MasterLogFile       field.String
	ReadMasterLogPos    field.Int64
	RelayMasterLogFile  field.String
	ExecMasterLogPos    field.Int64
	SecondsBehindMaster field.Int64
	SlaveLagSeconds     field.Int64
	NumSlaveHosts       field.Int32
	SlaveHosts          field.String
	ClusterName         field.String
	CreateTime          field.Time
	UpdateTime          field.Time

	fieldMap map[string]field.Expr
}

func (d databaseInstance) Table(newTableName string) *databaseInstance {
	d.databaseInstanceDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d databaseInstance) As(alias string) *databaseInstance {
	d.databaseInstanceDo.DO = *(d.databaseInstanceDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *databaseInstance) updateTableName(table string) *databaseInstance {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Hostname = field.NewString(table, "hostname")
	d.Port = field.NewInt32(table, "port")
	d.LastChecked = field.NewTime(table, "last_checked")
	d.LastSeen = field.NewTime(table, "last_seen")
	d.ServerID = field.NewInt32(table, "server_id")
	d.Version = field.NewString(table, "version")
	d.BinlogFormat = field.NewString(table, "binlog_format")
	d.LogBin = field.NewInt32(table, "log_bin")
	d.LogSlaveUpdates = field.NewInt32(table, "log_slave_updates")
	d.BinaryLogFile = field.NewString(table, "binary_log_file")
	d.BinaryLogPos = field.NewInt64(table, "binary_log_pos")
	d.MasterHost = field.NewString(table, "master_host")
	d.MasterPort = field.NewInt32(table, "master_port")
	d.SlaveSqlRunning = field.NewInt32(table, "slave_sql_running")
	d.SlaveIoRunning = field.NewInt32(table, "slave_io_running")
	d.MasterLogFile = field.NewString(table, "master_log_file")
	d.ReadMasterLogPos = field.NewInt64(table, "read_master_log_pos")
	d.RelayMasterLogFile = field.NewString(table, "relay_master_log_file")
	d.ExecMasterLogPos = field.NewInt64(table, "exec_master_log_pos")
	d.SecondsBehindMaster = field.NewInt64(table, "seconds_behind_master")
	d.SlaveLagSeconds = field.NewInt64(table, "slave_lag_seconds")
	d.NumSlaveHosts = field.NewInt32(table, "num_slave_hosts")
	d.SlaveHosts = field.NewString(table, "slave_hosts")
	d.ClusterName = field.NewString(table, "cluster_name")
	d.CreateTime = field.NewTime(table, "create_time")
	d.UpdateTime = field.NewTime(table, "update_time")

	d.fillFieldMap()

	return d
}

func (d *databaseInstance) WithContext(ctx context.Context) IDatabaseInstanceDo {
	return d.databaseInstanceDo.WithContext(ctx)
}

func (d databaseInstance) TableName() string { return d.databaseInstanceDo.TableName() }

func (d databaseInstance) Alias() string { return d.databaseInstanceDo.Alias() }

func (d databaseInstance) Columns(cols ...field.Expr) gen.Columns {
	return d.databaseInstanceDo.Columns(cols...)
}

func (d *databaseInstance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *databaseInstance) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 27)
	d.fieldMap["id"] = d.ID
	d.fieldMap["hostname"] = d.Hostname
	d.fieldMap["port"] = d.Port
	d.fieldMap["last_checked"] = d.LastChecked
	d.fieldMap["last_seen"] = d.LastSeen
	d.fieldMap["server_id"] = d.ServerID
	d.fieldMap["version"] = d.Version
	d.fieldMap["binlog_format"] = d.BinlogFormat
	d.fieldMap["log_bin"] = d.LogBin
	d.fieldMap["log_slave_updates"] = d.LogSlaveUpdates
	d.fieldMap["binary_log_file"] = d.BinaryLogFile
	d.fieldMap["binary_log_pos"] = d.BinaryLogPos
	d.fieldMap["master_host"] = d.MasterHost
	d.fieldMap["master_port"] = d.MasterPort
	d.fieldMap["slave_sql_running"] = d.SlaveSqlRunning
	d.fieldMap["slave_io_running"] = d.SlaveIoRunning
	d.fieldMap["master_log_file"] = d.MasterLogFile
	d.fieldMap["read_master_log_pos"] = d.ReadMasterLogPos
	d.fieldMap["relay_master_log_file"] = d.RelayMasterLogFile
	d.fieldMap["exec_master_log_pos"] = d.ExecMasterLogPos
	d.fieldMap["seconds_behind_master"] = d.SecondsBehindMaster
	d.fieldMap["slave_lag_seconds"] = d.SlaveLagSeconds
	d.fieldMap["num_slave_hosts"] = d.NumSlaveHosts
	d.fieldMap["slave_hosts"] = d.SlaveHosts
	d.fieldMap["cluster_name"] = d.ClusterName
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
}

func (d databaseInstance) clone(db *gorm.DB) databaseInstance {
	d.databaseInstanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d databaseInstance) replaceDB(db *gorm.DB) databaseInstance {
	d.databaseInstanceDo.ReplaceDB(db)
	return d
}

type databaseInstanceDo struct{ gen.DO }

type IDatabaseInstanceDo interface {
	gen.SubQuery
	Debug() IDatabaseInstanceDo
	WithContext(ctx context.Context) IDatabaseInstanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDatabaseInstanceDo
	WriteDB() IDatabaseInstanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDatabaseInstanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDatabaseInstanceDo
	Not(conds ...gen.Condition) IDatabaseInstanceDo
	Or(conds ...gen.Condition) IDatabaseInstanceDo
	Select(conds ...field.Expr) IDatabaseInstanceDo
	Where(conds ...gen.Condition) IDatabaseInstanceDo
	Order(conds ...field.Expr) IDatabaseInstanceDo
	Distinct(cols ...field.Expr) IDatabaseInstanceDo
	Omit(cols ...field.Expr) IDatabaseInstanceDo
	Join(table schema.Tabler, on ...field.Expr) IDatabaseInstanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDatabaseInstanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDatabaseInstanceDo
	Group(cols ...field.Expr) IDatabaseInstanceDo
	Having(conds ...gen.Condition) IDatabaseInstanceDo
	Limit(limit int) IDatabaseInstanceDo
	Offset(offset int) IDatabaseInstanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDatabaseInstanceDo
	Unscoped() IDatabaseInstanceDo
	Create(values ...*model.DatabaseInstance) error
	CreateInBatches(values []*model.DatabaseInstance, batchSize int) error
	Save(values ...*model.DatabaseInstance) error
	First() (*model.DatabaseInstance, error)
	Take() (*model.DatabaseInstance, error)
	Last() (*model.DatabaseInstance, error)
	Find() ([]*model.DatabaseInstance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DatabaseInstance, err error)
	FindInBatches(result *[]*model.DatabaseInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DatabaseInstance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDatabaseInstanceDo
	Assign(attrs ...field.AssignExpr) IDatabaseInstanceDo
	Joins(fields ...field.RelationField) IDatabaseInstanceDo
	Preload(fields ...field.RelationField) IDatabaseInstanceDo
	FirstOrInit() (*model.DatabaseInstance, error)
	FirstOrCreate() (*model.DatabaseInstance, error)
	FindByPage(offset int, limit int) (result []*model.DatabaseInstance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDatabaseInstanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d databaseInstanceDo) Debug() IDatabaseInstanceDo {
	return d.withDO(d.DO.Debug())
}

func (d databaseInstanceDo) WithContext(ctx context.Context) IDatabaseInstanceDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d databaseInstanceDo) ReadDB() IDatabaseInstanceDo {
	return d.Clauses(dbresolver.Read)
}

func (d databaseInstanceDo) WriteDB() IDatabaseInstanceDo {
	return d.Clauses(dbresolver.Write)
}

func (d databaseInstanceDo) Session(config *gorm.Session) IDatabaseInstanceDo {
	return d.withDO(d.DO.Session(config))
}

func (d databaseInstanceDo) Clauses(conds ...clause.Expression) IDatabaseInstanceDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d databaseInstanceDo) Returning(value interface{}, columns ...string) IDatabaseInstanceDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d databaseInstanceDo) Not(conds ...gen.Condition) IDatabaseInstanceDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d databaseInstanceDo) Or(conds ...gen.Condition) IDatabaseInstanceDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d databaseInstanceDo) Select(conds ...field.Expr) IDatabaseInstanceDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d databaseInstanceDo) Where(conds ...gen.Condition) IDatabaseInstanceDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d databaseInstanceDo) Order(conds ...field.Expr) IDatabaseInstanceDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d databaseInstanceDo) Distinct(cols ...field.Expr) IDatabaseInstanceDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d databaseInstanceDo) Omit(cols ...field.Expr) IDatabaseInstanceDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d databaseInstanceDo) Join(table schema.Tabler, on ...field.Expr) IDatabaseInstanceDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d databaseInstanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDatabaseInstanceDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d databaseInstanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IDatabaseInstanceDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d databaseInstanceDo) Group(cols ...field.Expr) IDatabaseInstanceDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d databaseInstanceDo) Having(conds ...gen.Condition) IDatabaseInstanceDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d databaseInstanceDo) Limit(limit int) IDatabaseInstanceDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d databaseInstanceDo) Offset(offset int) IDatabaseInstanceDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d databaseInstanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDatabaseInstanceDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d databaseInstanceDo) Unscoped() IDatabaseInstanceDo {
	return d.withDO(d.DO.Unscoped())
}

func (d databaseInstanceDo) Create(values ...*model.DatabaseInstance) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d databaseInstanceDo) CreateInBatches(values []*model.DatabaseInstance, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d databaseInstanceDo) Save(values ...*model.DatabaseInstance) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d databaseInstanceDo) First() (*model.DatabaseInstance, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatabaseInstance), nil
	}
}

func (d databaseInstanceDo) Take() (*model.DatabaseInstance, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatabaseInstance), nil
	}
}

func (d databaseInstanceDo) Last() (*model.DatabaseInstance, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatabaseInstance), nil
	}
}

func (d databaseInstanceDo) Find() ([]*model.DatabaseInstance, error) {
	result, err := d.DO.Find()
	return result.([]*model.DatabaseInstance), err
}

func (d databaseInstanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DatabaseInstance, err error) {
	buf := make([]*model.DatabaseInstance, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d databaseInstanceDo) FindInBatches(result *[]*model.DatabaseInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d databaseInstanceDo) Attrs(attrs ...field.AssignExpr) IDatabaseInstanceDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d databaseInstanceDo) Assign(attrs ...field.AssignExpr) IDatabaseInstanceDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d databaseInstanceDo) Joins(fields ...field.RelationField) IDatabaseInstanceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d databaseInstanceDo) Preload(fields ...field.RelationField) IDatabaseInstanceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d databaseInstanceDo) FirstOrInit() (*model.DatabaseInstance, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatabaseInstance), nil
	}
}

func (d databaseInstanceDo) FirstOrCreate() (*model.DatabaseInstance, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatabaseInstance), nil
	}
}

func (d databaseInstanceDo) FindByPage(offset int, limit int) (result []*model.DatabaseInstance, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d databaseInstanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d databaseInstanceDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d databaseInstanceDo) Delete(models ...*model.DatabaseInstance) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *databaseInstanceDo) withDO(do gen.Dao) *databaseInstanceDo {
	d.DO = *do.(*gen.DO)
	return d
}
